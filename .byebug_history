described_class.new.call(:show_main_menu)
exit
2.3 - 2.0
machine.balance
coin.value * qty_to_return
exit
picked_product.name
picked_product
exit
picked_product
exit
opts
exit
machine.pick(result)
result
exit
result
exit
result
exit
result
exit
result
exit
result
exit
result
exit
a
env.machine.returned_coins
exit
a
coins
exit
env.machine.dispense
env.machine
exit
env.machine.inventory
exit
Command.call(:ttt)
Command.call
Command
exit
prompt
machine
exit
@subclasses
@prompt
prompt
exit
name
exit
Command.call(:init)
Command
exit
Vvm::CLI::Command
Command
exit
coin
exit
coin.to_f
coin.to_d
coin
exit
qq.convert :float
qq
q
exit
qq
q
exit
coin.dup(qty: 1)
coin.dup
exit
machine.insert(10)
machine.pick('water')
machine.dispense
machine.insert(0.25).pick('water')
exit
machine.insert(0.25)
machine.inventory
machine.coins
machine
exit
machine.insert('123')
machine.pick('water')
machine.insert(10)
exit
machine.insert(10)
machine.pick('water')
machine.state
exit
machine.state
machine.pick('water')
machine.insert(5)
exit
Vvm::Model::Product.new('Water', 0.25, 1)
Vvm::Model::Product.new('Water', 0.25)
Vvm::Model::Product.new('Water', 2)
Vvm::Model::Product.new
Vvm::Model::Product
exit
machine.pick('Coca Cola2')
machine.pick('Coca Cola')
machine.insert(10)
machine.state
machine.inventory
machine
machine.inventory = []
machine.inventory
exit
machine.inventory
machine
exit
machine.state.class
machine.state
machine.state.name
exit
coin
exit
coin
exit
(balance / coin.value).floor % 5
(balance / coin.value).floor
(balance / coin.value).floor % coin.qty
(balance / coin.value).floor
exit
machine.dispense
exit
machine.dispense
exit
machine.dispense
exit
(balance / coin.value).floor
balance / coin.value
coin
balance
exit
coin.dup
coin.dup.qty = 1
coin.dup
coin.qty
exit
coin.value > acc
acc
exit
coin
balance
acc
exit
coins.each_with_object
balance
coin
exit
[coins.first]
coins
balance
coins
balance
exit
balance
exit
balance
exit
balance
exit
balance
exit
balance
self.insert(5)
balance
exit
balance
exit
machine.dispense
exit
a
a.qty -= 1
a.qty
a = machine.pick('Coca Cola')
machine.pick('Coca Cola')
exit
machine.pick('Coca Cola2')
machine.pick('Coca Cola')
exit
InsufficientBalance.class
InsufficientBalance
exit
balance
product.price
product
exit
inventory.detect { _1.name == product_name }
inventory.detect
inventory
exit
machine.coins.last.value
machine.coins.last
machine.coins
machine.inventory
machine
exit
machine.coins
exit
Vvm::Model::Product.new(*default_config['inventory'].first.values)
Vvm::Model::Product.new(default_config['inventory'].first.values)
Vvm::Model::Product.new(**default_config['inventory'].first)
Vvm::Model::Product.new(default_config['inventory'].first)
default_config['inventory'].first
default_config['inventory']
default_config
exit
coin.qty
coin.value
coin = Vvm::Model::Coin.new(124, 2)
coin = Vvm::Model::Coin.new(124)
coin.value
coin = Vvm::Model::Coin.new(value: 'ga124')
Vvm::Model::Coin.new(value: 'ga124')
Vvm::Model::Coin.new(value: 'gas')
Vvm::Model::Coin.new(value: 'gas'
Vvm::Model::Coin.new
Vvm::Model::Coin
exit
Vvm::Model::Coin
Vvm::Model
exit
Class.instance
Vvm::Machine.instance
Vvm::Machine
Vvm::Machine.instance
Vvm::Machine
exit
machine.config.has_key?('inventory')
machine.has_key?('inventory')
machine.key?('inventory')
machine.config
machine
machine.run('start')
machine.run
machine.rune
machine.start
exit
a
exit
@config
exit
GEM_HOME
exit
YAML.load_file(File.realpath("#{File.join(File.dirname(__FILE__))}/config.yaml"))["default"]
File.realpath("#{File.join(File.dirname(__FILE__))}/config.yaml")
File.realpath("#{File.join(File.dirname(__FILE__))}/config.yaml"))
File.realpath("#{File.join(File.dirname(__FILE__))}/config.yaml"
exit
YAML.load_file(File.realpath(File.join(File.dirname(__FILE__))) + "/config.yaml")['default']
YAML.load_file(File.realpath(File.join(File.dirname(__FILE__))) + "/config.yaml")
